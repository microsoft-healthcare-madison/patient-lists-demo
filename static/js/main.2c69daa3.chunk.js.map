{"version":3,"sources":["components/HeaderPanel.js","api.js","components/FHIRResource.js","components/ListsPanel.js","components/DeveloperPanel.js","components/PatientsPanel.js","components/AttributesPanel.js","App.js","serviceWorker.js","index.js"],"names":["ServerInputForm","props","React","useState","serverRootURL","setServerRootURL","validURL","setValidURL","tagSystem","setTagSystem","tagCode","setTagCode","isSettingsOpen","setIsSettingsOpen","onClick","isOpen","keepChildrenMounted","className","onSubmit","event","preventDefault","type","value","onChange","target","trim","URL","fetch","then","catch","e","disabled","HeaderPanel","developerMessages","this","setDeveloperMessages","Component","getRefsFrom","bundle","code","resources","entry","map","resource","filter","Boolean","getResources","ch7istics","flatMap","x","characteristic","coding","some","c","system","getCharacteristics","locations","Set","valueReference","reference","sort","resourceUrl","progressCallback","a","bundles","url","response","json","push","newBundle","pop","next","link","relation","length","undefined","total","filterLists","lists","selections","listsCopy","console","warn","b","left","name","right","localeCompare","Resource","resourceType","id","display","getHoverData","hoverContent","attribute","key","style","fontWeight","content","transitionDuration","intent","boundary","hoverCloseDelay","enforceFocus","ListSelector","selectedList","setSelectedList","handleListSelection","selectedValue","href","encodeURI","color","rel","actual","member","ResourceRow","ListsPanel","state","groups","groupsIncluded","locationsIncluded","serverRoot","bind","loaded","includes","params","encodedParamString","kv","encodeURIComponent","join","query","stateLocation","validator","drain","getRefreshQueryUrl","newState","included","setState","setPatients","refreshResources","refreshData","list","cachedPatients","members","memberRefs","entity","log","r","has","resolvePatients","overflowY","DeveloperPanel","messages","isHidden","setIsHidden","zIndex","position","title","patientAttributeGetters","p","patient","officialNames","use","names","given","fn","family","replace","ageMs","Date","now","parse","birthDate","Math","trunc","getUTCFullYear","gender","PatientsPanel","patients","attributeGetters","getters","extraAttributeGetters","columns","condensed","interactive","slice","getter","getRow","row","col","i","ExtraAttributesPanel","what","setColumns","setExtraAttributeGetters","checked","handleAttributeSelected","isChecked","App","useEffect","message","d","window","location","hostname","match","DemoApp","strict","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.2c69daa3.chunk.js","sourcesContent":["import React from 'react';\nimport 'components/HeaderPanel.css'\nimport { Button, Collapse } from \"@blueprintjs/core\";\n\nconst appTitle = \"Patient Lists Demo App\";\n\n// NICE: Remake this as a NavBar: https://blueprintjs.com/docs/#core/components/navbar\n//       The Server Root URL can be part of a Settings Cog, then.\n\n// EASY: add a blueprint Toast when a server entry has been entered and accpeted:\n//       https://blueprintjs.com/docs/#core/components/toast\n\nfunction ServerInputForm(props) {\n  const [serverRootURL, setServerRootURL] = React.useState(props.serverRootURL);\n  const [validURL, setValidURL] = React.useState(true);\n  const [tagSystem, setTagSystem] = React.useState(props.tagSystem);\n  const [tagCode, setTagCode] = React.useState(props.tagCode)\n  const [isSettingsOpen, setIsSettingsOpen] = React.useState(false);\n\n  const applySettingsButton = (event) => {\n    event.preventDefault();\n    props.setServerRootURL(serverRootURL);\n    props.setTagCode(tagCode);\n    props.setTagSystem(tagSystem);\n  }\n\n  // Updates the input field value as the user enters new values.\n  const serverRootChanged = (event) => {\n    const value = event.target.value.trim();\n    setServerRootURL(value);\n    try {\n      new URL(value);\n      fetch(value + '/CapabilityStatement')\n        .then(() => setValidURL(true))\n        .catch(() => setValidURL(false));\n    } catch(e) {\n      setValidURL(false);\n    }\n  }\n\n  // Updates the input field as the user enters new values.\n  const tagSystemChanged = (event) => {\n    setTagSystem(event.target.value.trim());\n  }\n\n  // Updates the input field as the user enters new values.\n  const tagCodeChanged = (event) => {\n    setTagCode(event.target.value.trim());\n  }\n\n  // TODO: replace this homebrewed form with a blueprint FormGroup, maybe.\n  return (\n    <>\n      <Button\n        onClick={ () => { setIsSettingsOpen(!isSettingsOpen); } }\n      >{ isSettingsOpen ? \"Hide\" : \"Show\" } Settings</Button>\n      <Collapse\n        isOpen={isSettingsOpen}\n        keepChildrenMounted={true}\n      >\n        <form className=\"server\" onSubmit={applySettingsButton}>\n          <label>FHIR Server Root</label>\n          &nbsp;\n          <input\n            className=\"url\"\n            type=\"text\"\n            value={serverRootURL}\n            onChange={serverRootChanged}\n          />\n          <br></br>\n          <br></br>\n\n          <label>Data Tag</label>\n          <table>\n            <tbody>\n              <tr>\n                <td>\n                  <label>system</label>\n                </td>\n                <td>\n                  <input\n                    className=\"url\"\n                    type=\"text\"\n                    value={tagSystem}\n                    onChange={tagSystemChanged}\n                  />\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <label>code</label>\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    value={tagCode}\n                    onChange={tagCodeChanged}\n                  />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <Button type=\"submit\" disabled={!validURL}>Apply</Button>\n        </form>\n      </Collapse>\n    </>\n  );\n}\n\nclass HeaderPanel extends React.Component {\n  render() {\n    return (\n      <div>\n        <span className=\"app-title\">{appTitle}</span>\n        <ServerInputForm\n          developerMessages={this.props.developerMessages}\n          serverRootURL={this.props.serverRootURL}\n          setDeveloperMessages={this.props.setDeveloperMessages}\n          setServerRootURL={this.props.setServerRootURL}\n          setTagCode={this.props.setTagCode}\n          setTagSystem={this.props.setTagSystem}\n          tagCode={this.props.tagCode}\n          tagSystem={this.props.tagSystem}\n      />\n      </div>  \n    );\n  }\n}\n\nexport default HeaderPanel;\n","// TODO: consider renaming this file\n\nexport const codeSystem = \"http://argonautproject.org/patient-lists/CodeSystem/characteristics\";\nexport const demoTag = {\n  system: 'http://connectathon.fhir.org/',\n  code: '2020-sep',\n};\n\n\n// Returns the non-empty resources from a bundle.\nfunction getResources(bundle) {\n  return bundle && bundle.entry ? bundle.entry.map(e => e.resource).filter(Boolean) : [];\n}\n\n// Returns the patient list characteristics matching a code (ie 'at-location').\nfunction getCharacteristics(resources, code) {\n  const hasChars = resources.flatMap(x => x.characteristic).filter(Boolean);\n  return hasChars.filter(\n    x => x.code && x.code.coding && x.code.coding.some(\n      c => c.system === codeSystem && c.code === code\n    )\n  );\n}\n\n// Returns the sorted set of code references from lists in a bundle.\nexport function getRefsFrom(bundle, code) {\n  const resources = getResources(bundle);\n  if (!resources) {\n    return [];\n  }\n  const ch7istics = getCharacteristics(resources, code);\n  const locations = new Set(ch7istics.map(x => x.valueReference.reference));\n  return [...locations].sort();\n}\n\n// NICE: When the results include resources of different types, there should be\n//       separate bundles per type.  So, if the first pages of bundles contain\n//       Group followed by pages of Patient bundles - the returned value should be\n//       a list of 2 bundles with all the Groups and Patients separated.\n\n// NICE: Don't return a Bundle.  Instead return a list of tuples: [[ResourceType, [resources]], ...]\n\n// Returns a de-paginated bundle of resources from an initial URL.\nexport async function drain(resourceUrl, progressCallback) {\n  const bundles = [];\n  let url = resourceUrl;\n  do {\n    // Fetch a bundle from the URL.\n    await fetch(url)\n      .then(response => response.json())\n      .then(bundle => bundles.push(bundle));\n    const newBundle = bundles.pop();\n    if (!newBundle.entry) { newBundle.entry = []; }\n\n    // If the search was paginated, prepare to fetch the following bundle.\n    const next = newBundle.link.filter(x => x.relation === 'next');\n    url = next.length ? next[0].url : undefined;\n\n    // Build up the entries in the first bundle to include entries from all.\n    if (bundles.length === 0) {\n      bundles.push(newBundle);\n    } else {\n      bundles[0].entry.push(...newBundle.entry);\n    }\n\n    // Inform the caller of the current progress via callback, if defined.\n    if (progressCallback && bundles.length && bundles[0].entry) {\n      progressCallback(bundles[0].entry.length, bundles[0].total);\n    }\n  } while (url);\n  return bundles[0];\n}\n\n// Returns a list of resources from a bundle based on in-app selections.\nexport function filterLists(lists, selections) {\n  // Shallow-copy the list.\n  const listsCopy = [...lists];\n\n  // TODO: apply the filter by removing lists that match no selections.\n  if (selections.length) {\n    console.warn('Not Implemented yet: api.filterLists', selections);  // XXX\n  }\n\n  // Sort the remaining lists by name.\n  return listsCopy.sort((a, b) => {\n    const left = a.resource.name || '';\n    const right = b.resource.name || '';\n    return left.localeCompare(right);\n  });\n}\n","/*\n  A component that wraps a FHIR resource, enabling a hover-text popup with\n  additional details about the resource.\n\n  <Resource\n    resource={resource}\n    display={resource.name}\n    getHoverData={(resource) => {\n      return [\n        ['id', resource.id],\n        ['url', resource.url],\n        ['name', resource.name],\n      ];\n    }}\n    />\n  \n  NICE\n    [ ] hover-text shows extra details in a *focusable* pop-up panel\n*/\nimport React from 'react'\nimport { Tooltip } from \"@blueprintjs/core\";\n\nexport function Resource(props) {\n  const resource = props.resource;\n  const reference = `${resource.resourceType}/${resource.id}`\n  const display = props.display || reference;\n  const disabled = props.getHoverData ? false : true;\n  let hoverContent = <table/>;  // placeholder\n  if (props.getHoverData) {\n    hoverContent = (\n      <table>\n        <tbody>\n          {\n            props.getHoverData(resource).map(([attribute, value]) => {\n              return (\n                <tr key={`${reference}.${attribute}`}>\n                  <td style={{fontWeight: 'bold'}}>{attribute}</td>\n                  <td>{value}</td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  }\n  // TODO: figure out how to enable the tool-top to be focused when hovered-over.\n  return (\n    <Tooltip\n      content={hoverContent}\n      disabled={disabled}\n      transitionDuration={100}\n      intent=\"primary\"\n      boundary=\"viewport\"\n      hoverCloseDelay={1000}\n      enforceFocus={false}\n    >\n      <span>{display}</span>\n    </Tooltip>\n  );\n}\n","import { drain, getRefsFrom, filterLists } from 'api';\nimport React from 'react';\nimport { Radio, RadioGroup } from \"@blueprintjs/core\";\nimport { Resource } from 'components/FHIRResource';\n\nconst debug = false;  // XXX\n\n// TODO: move this to a FHIRGroup module?\n// TODO: create a src.components.fhir folder?\n\n// A FHIR Resource in a table row.\nfunction ResourceRow(props) {\n  const resource = props.resource;\n  const key = `${resource.resourceType}/${resource.id}`;\n  return (\n    <Radio\n      key={key}\n      value={key}\n    >\n      <Resource\n        display={resource.name}\n        resource={resource}\n        getHoverData={(resource) => {\n          return [\n            ['reference', (\n              <a\n                href={encodeURI(`${props.serverRootURL}/${key}`)}\n                style={{color: 'yellow'}}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                {key}\n              </a>\n            )],\n            ['actual', resource.actual ? 'true' : 'false'],\n            ['type', resource.type],\n            ['members', resource.member ? resource.member.length : 0],\n            // TODO: add any other relevant hover-text fields here.\n          ];\n        }}\n      />\n    </Radio>\n  );\n}\n\n// A sorted list of patient lists, pre-filtered by the current filter selection.\nfunction ListSelector(props) {\n  // TODO: pull this up to the main panel.\n  const [selectedList, setSelectedList] = React.useState();\n  if (!props.lists) {\n    return <></>;\n  }\n\n  function getList(reference) {\n    return props.lists.filter(\n      (x) => `Group/${x.resource.id}` === reference\n    )[0];\n  }\n\n  return (\n    <RadioGroup\n      onChange={(e) => {\n        setSelectedList(e.target.value);\n        props.handleListSelection(getList(e.target.value).resource);\n      }}\n      selectedValue={selectedList}\n    >{\n        props.lists.map((x) => {\n          return ResourceRow({\n            handleListSelection: props.handleListSelection,\n            resource: x.resource,\n            serverRootURL: props.serverRootURL,\n          });\n        })\n      }\n    </RadioGroup>\n  );\n}\n\n// A panel of selectable patient lists with optional filters.\nclass ListsPanel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      groups: [],\n      groupsIncluded: [],\n      locations: [],\n      locationsIncluded: [],\n      serverRoot: props.serverRootURL,\n      tagCode: props.tagCode,\n      tagSystem: props.tagSystem,\n    };\n    this.handleListSelection = this.handleListSelection.bind(this);\n  }\n\n  // NICE: update something on-screen while data is loading.\n  progressCallback(resourceType, loaded, total) {\n    if (debug) {\n      console.log(`Loaded ${loaded} of ${total} ${resourceType} records`);\n    }\n  }\n\n  // Returns a URL to refresh an optionally tagged resource type which may _include other types.\n  getRefreshQueryUrl(resourceType, includes) {\n    const params = [];\n    if (this.props.tagSystem && this.props.tagCode) {\n      params.push(['_tag', `${this.props.tagSystem}|${this.props.tagCode}`]);\n    }\n    if (includes && includes.length) {\n      params.push(...includes.map(x => ['_include', x]));\n    }\n    const encodedParamString = params\n      .map(kv => kv.map(encodeURIComponent).join(\"=\"))\n      .join(\"&\");\n    const query = encodedParamString ? `?${encodedParamString}` : '';\n    return `${this.props.serverRootURL}/${resourceType}${query}`;\n  }\n\n  refreshResources(resourceType, stateLocation, includes, validator) {\n    const url = this.getRefreshQueryUrl(resourceType, includes);\n    drain(url, (x, total) => { this.progressCallback(resourceType, x, total); })\n      .then((bundle) => {\n        const newState = {};\n        const resources = bundle.entry.filter(e => e.resource.resourceType === resourceType);\n        const included = bundle.entry.filter(e => e.resource.resourceType !== resourceType);\n        newState[stateLocation] = resources;\n        newState[`${stateLocation}Included`] = included;\n        if (validator) {\n          resources.map(x => validator(resourceType, x));\n        }\n        this.setState(newState);\n      });\n  }\n\n  refreshData() {\n    this.props.setPatients([]);\n    //this.props.setSelectedList(undefined);\n    this.refreshResources('Group', 'groups', ['Group:member']);\n    this.refreshResources('Location', 'locations');\n    // NICE: examine the fetched data, logging a warning to DeveloperPanel if any look malformed\n  }\n\n  componentDidMount() {\n    this.refreshData();\n  }\n\n  componentDidUpdate() {\n    // Refresh ALL the cached data when the server component has changed.\n    const needsRefresh =\n      (this.state.serverRoot !== this.props.serverRootURL) ||\n      (this.state.tagCode !== this.props.tagCode) ||\n      (this.state.tagSystem !== this.props.tagSystem);\n\n    if (needsRefresh) {\n      this.refreshData();\n      this.setState({\n        serverRoot: this.props.serverRootURL,\n        tagCode: this.props.tagCode,\n        tagSystem: this.props.tagSystem,\n      });\n    }\n  }\n\n  // BUG: This app assumes that a Group's member.entity contains a 'reference' to a patient.\n  //      The 'reference' member.entity attribute is technically optional - there are other\n  //      ways to represent a reference to a list member.\n  //      Maybe a validator can log a warning about that earlier in the UI when encountered\n  //      (and fail gracefully).\n\n  // TODO: move this logic to the api.js module, since it has nothing to do with rendering and\n  //       everything to do with the new API.\n\n  // TODO: include the FHIR server root URL in case it's needed to fetch a patient that's not\n  //       in the cache already.\n\n  // Returns the complete list of Patient resources who are members of a list.\n  resolvePatients(list, cachedPatients) {\n\n    // Returns the reference for a list member from the list.member fragment.\n    function getReference(member) {\n      if (member && member.entity) {\n        return member.entity.reference;\n      }\n      console.log('resolvePatients.getReference: unknown reference type in:', list);\n    }\n\n    const members = list.member ? list.member : [];\n    const memberRefs = new Set(members.map(getReference).filter(x => x));\n\n    // NICE: if the member is not in the cache, log a warning somewhere, or maybe fetch it.\n\n    return cachedPatients\n      .map(x => x.resource)\n      .filter(r => memberRefs.has(`${r.resourceType}/${r.id}`)\n    );\n  }\n\n  handleListSelection(resource) {\n    if (!resource.member) {\n      this.props.setPatients([]);\n    } else {\n      this.props.setPatients(\n        this.resolvePatients(resource, this.state.groupsIncluded)\n      );\n    }\n  }\n\n  render() {\n    const lists = this.state.groups;\n    // TODO: group the characteristics selections into one function.\n    const locations = getRefsFrom(lists, 'at-location');\n    const orgs = getRefsFrom(lists, 'attributed-to-organization');\n    const docs = getRefsFrom(lists, 'attributed-to-practitioner');\n    const careTeams = getRefsFrom(lists, 'attributed-to-careteam');\n    // TODO: get the component selections, saving them into an object.\n    // TODO: also collect Orgs and Docs from the ManagingEntity field (either should work).\n    if (debug) {\n      console.log('render selections from', locations, orgs, docs, careTeams);  // XXX\n    }\n    const selections = [];\n\n    // TODO: pass in a hook state for the selectedList and a setter.  This will allow a data refresh to\n    //       un-select the current selected list (which would be needed when changing servers).\n\n    // NICE: turn this into a NavBar: https://blueprintjs.com/docs/#core/components/navbar followed by a scrollable ListSelector\n    return (\n      <>\n        <div style={{ fontWeight: 'bold' }} >\n          Patient Lists ({this.state.groups.length})\n        </div>\n        <div style={{ overflowY: 'scroll' }} >\n          <ListSelector\n            handleListSelection={this.handleListSelection}\n            lists={filterLists(lists, selections)}\n            serverRootURL={this.props.serverRootURL}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ListsPanel;","import React from 'react';\nimport 'components/DeveloperPanel.css'\nimport { Button, Callout, Collapse } from \"@blueprintjs/core\";\n\n// NICE: enable this panel to be resized up and down.\n\nexport default function DeveloperPanel(props) {\n  let messages = props.developerMessages || <pre key=\"0\">None</pre>;\n  const [isHidden, setIsHidden] = React.useState(true);\n\n  return (\n    <>\n      <Button\n        onClick={() => {setIsHidden(!isHidden)}}\n        style={{zIndex: 1, position: 'relative'}}\n      >\n        {isHidden ? \"Show\" : \"Hide\"} Developer Messages\n      </Button>\n      <Collapse isOpen={!isHidden}>\n        <Callout title=\"Developer Messages (Most Recent At Top)\">\n          <div style={{overflowY: 'scroll'}}>\n            {messages}\n          </div>\n        </Callout>\n      </Collapse>\n    </>\n  );\n}\n","import React from 'react';\nimport 'components/PatientsPanel.css'\nimport { HTMLTable } from '@blueprintjs/core';\n\n// TODO: decide how to enable the on-hover data for patients, just like in the lists panel\n\nfunction getRow(patient, attributeGetters) {\n  return attributeGetters.map(getter => getter[1](patient));\n}\n\nfunction getData(patients, attributeGetters) {\n  return patients.map(patient => getRow(patient, attributeGetters));\n}\n\nfunction getName(patient) {\n  if (patient && patient.name) {\n    const officialNames = patient.name.filter(name => name.use === 'official');\n    if (officialNames.length) {\n      const name = officialNames[0];\n      const names = name.given.map(fn => `${fn} ${name.family}`);\n      if (names.length) {\n        return names[0].replace(/[0-9]/g, '');\n      }\n    }\n  }\n  return 'J. Doe';\n}\n\nfunction getAge(patient) {\n  const ageMs = Date.now() - Date.parse(patient.birthDate);\n  return Math.trunc(new Date(ageMs).getUTCFullYear() - 1970);\n}\n\nconst patientAttributeGetters = [\n  ['ID', p => p.id],\n  ['Name', getName],\n  ['Age', getAge],\n  ['Sex', p => p.gender === 'female' ? 'F' : 'M'],\n];\n\nexport default function PatientsPanel(props) {\n  const getters = [...patientAttributeGetters, ...props.extraAttributeGetters];\n  const columns = getters.map(x => x[0]);\n  return (\n    <>\n      <div style={{ fontWeight: 'bold' }} >\n        Patients ({props.patients.length} selected)\n      </div>\n      <span style={{ overflowY: 'scroll' }} >\n        <HTMLTable condensed={true} interactive={true}>\n          <thead>\n            <tr key=\"patientsPanelHeaders\">{columns.slice(1).map(x =>\n              <th key={x}>{x}</th>\n            )}</tr>\n          </thead>\n          <tbody>\n            {getData(props.patients, getters).map(row =>\n              <tr key={`patientsPanelPatient/${row[0]}`}>{row.slice(1).map((col, i) =>\n                <td key={`Patient/${row[0]}/${i}`}>{col}</td>\n              )}</tr>\n            )}\n          </tbody>\n        </HTMLTable>\n      </span>\n    </>\n  );\n}\n","import React from 'react';\nimport 'components/AttributesPanel.css'\nimport { Checkbox, HTMLTable } from '@blueprintjs/core';\n\n// NICE: reveal this panel by clicking a Button.\n\nfunction getConditions(patient) {\n  return ['Asthma', 'Fibromyalgia', 'Cancer'];\n}\n\nfunction getLatestEncounter(patient) {\n  return '2020-08-21';\n}\n\nfunction getLastImmunization(patient) {\n  return '2019-12-26';\n}\n\nfunction getLocation(patient) {\n  return 'Ward 1';\n}\n\nfunction getPCP(patient) {\n  // TODO: implement this\n  return 'Dr. Doe';\n}\n\nconst extraAttributeGetters = [\n  ['Conditions', getConditions],\n  ['Current Location', getLocation],\n  ['Last Immunization', getLastImmunization],\n  ['Latest Encounter', getLatestEncounter],\n  ['PCP', getPCP],\n];\n\n// TODO: decide what the tooltip will contain when hovering over the row.\nexport default function ExtraAttributesPanel(props) {\n  // Applies the changes.\n  function handleAttributeSelected(event, what) {\n    const setColumns = props.setExtraAttributeGetters;\n    if (event.target.checked) {\n      setColumns([...props.extraAttributeGetters, what]);\n    } else {\n      setColumns(props.extraAttributeGetters.filter(x => x[0] !== what[0]));\n    }\n  }\n\n  return (\n    <>\n      <div style={{ fontWeight: 'bold' }} >\n        Extra Attributes\n      </div>\n      <span style={{ overflowY: 'scroll' }} >\n        <HTMLTable condensed={true}>\n          <tbody>\n            {extraAttributeGetters\n              .map(x =>\n                <tr key={x[0]}>\n                  <td>\n                    <Checkbox\n                      onChange={(e) => handleAttributeSelected(e, x)}\n                      checked={props.isChecked}\n                    >\n                      {x[0]}\n                    </Checkbox>\n                  </td>\n                </tr>\n              )\n            }\n          </tbody>\n        </HTMLTable>\n      </span>\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport HeaderPanel from 'components/HeaderPanel';\nimport ListsPanel from 'components/ListsPanel';\nimport DeveloperPanel from 'components/DeveloperPanel';\nimport PatientsPanel from 'components/PatientsPanel';\nimport ExtraAttributesPanel from 'components/AttributesPanel';\n\nimport './App.css';\nimport \"normalize.css\";\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/select/lib/css/blueprint-select.css';\n\n// TODO: update this with the public-facing URL, when it's available.\n//const defaultServerRootURL = \"http://localhost:8080/hapi-fhir-jpaserver/fhir/\";\nconst defaultServerRootURL = 'http://hapi.fhir.org/baseR4/';\nconst defaultTagSystem = 'http://hl7.org/Connectathon'\nconst defaultTagCode = '2020-Sep'\n\nfunction App() {\n  const [developerMessages, setDeveloperMessages] = useState([]);\n  const [extraAttributeGetters, setExtraAttributeGetters] = useState([]);\n  const [patients, setPatients] = useState([]);\n  const [serverRootURL, setServerRootURL] = useState(defaultServerRootURL);\n  const [tagSystem, setTagSystem] = useState(defaultTagSystem);\n  const [tagCode, setTagCode] = useState(defaultTagCode);\n\n  React.useEffect(() => {\n    const message = (\n      <pre key={Date.now()}>Updated FHIR Server root to: {serverRootURL}</pre>\n    );\n    setDeveloperMessages(d => [message, ...d]);\n  }, [serverRootURL]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"row\">\n        <div className=\"top\">\n          <HeaderPanel\n            developerMessages={developerMessages}\n            serverRootURL={serverRootURL}\n            setDeveloperMessages={setDeveloperMessages}\n            setServerRootURL={setServerRootURL}\n            setTagCode={setTagCode}\n            setTagSystem={setTagSystem}\n            tagCode={tagCode}\n            tagSystem={tagSystem}\n          /></div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"left\">\n          <ListsPanel\n            developerMessages={developerMessages}\n            serverRootURL={serverRootURL}\n            setDeveloperMessages={setDeveloperMessages}\n            setPatients={setPatients}\n            tagCode={tagCode}\n            tagSystem={tagSystem}\n          />\n        </div>\n        <div className=\"center\">\n          <PatientsPanel\n            extraAttributeGetters={extraAttributeGetters}\n            patients={patients}\n            setDeveloperMessages={setDeveloperMessages}\n          />\n        </div>\n        <div className=\"right\">\n          <ExtraAttributesPanel\n            extraAttributeGetters={extraAttributeGetters}\n            setExtraAttributeGetters={setExtraAttributeGetters}\n          />\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"bottom\">\n          <DeveloperPanel\n            developerMessages={developerMessages}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Returns a DemoApp either in strict or 'normal' mode.\nfunction DemoApp(props) {\n  if (props.strict) {\n    return (\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    );\n  }\n  return <App />;\n}\n\nReactDOM.render(\n  <DemoApp strict={false} />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}